
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
           lua_package_path "/path/to/lua-resty-redis/lib/?.lua;;";
    server {
        listen       80;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location / {
		default_type text/html;
		 resolver 8.8.8.8;
		content_by_lua_block {
		local redis = require "resty.redis"

		local red = redis:new()

		red:set_timeouts(100000,100000,100000)

		red:connect("ip",端口)
		 local connect = red:connect("ip", 端口)
		if connect then
			ngx.say("connect Success")
		end
		local auth,err = red:auth("密码如果没有则不用设置")
		 if not auth then
					ngx.say("failed to authenticate: ", err)
		 end

		local args = ngx.req.get_uri_args()

		for k,v in pairs(args) do
			 local ok = red:set(k,v)
			ngx.say(k,"args")
			  if  not ok then

				ngx.say("failed")
			end
			 if ok then

				ngx.say(k,"set Successs")

			  end

		 end
			}

		}
	}

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
        listen       8050;
              location /get {
		default_type text/html;
		content_by_lua_block {
			ngx.say("get ")
		}
		# 限流脚本
		access_by_lua_file /softwares/openresty/luascript/access_by_limit_frequency.lua;
              }
	location /set{
		default_type text/html;
		content_by_lua_block {
			ngx.say("set")
		}

		access_by_lua_file /softwares/openresty/luascript/access_by_limit_frequency.lua;
             		 }
	location /put{
		default_type text/html;
		content_by_lua_block {
			ngx.say("put ")
		}

		access_by_lua_file /softwares/openresty/luascript/access_by_limit_frequency.lua;
             		 }

	}


}
